/* 
 * Copyright (C) 2017 ESDC/ESA 2017
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package esavo.vospec.main;

import esavo.vospec.spectrum.*;
import esavo.vospec.util.Utils;
import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author  jsalgado
 */
public class AddNewDialog extends javax.swing.JDialog {


    public Vector       columnsVector       = new Vector();
    public File         currentDirectory    = null;
    public Spectrum     outputSpectrum      = null;


    /** Creates new form AddNewDialog */
    public AddNewDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        myInitComponents();
        this.setTitle("Edit Spectra");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        urlLabel = new javax.swing.JLabel();
        urlText = new javax.swing.JTextField();
        urlButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        typeLabel = new javax.swing.JLabel();
        typeCombo = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        descriptionLabel = new javax.swing.JLabel();
        descriptionText = new javax.swing.JTextField();
        spectralPanel = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        waveColumnCombo = new javax.swing.JComboBox();
        wavePreUnitsLabel = new javax.swing.JLabel();
        wavePreUnitsCombo = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        waveUnitStringLabel = new javax.swing.JLabel();
        waveUnitStringText = new javax.swing.JTextField();
        waveCalculateButton = new javax.swing.JButton();
        waveScaleqLabel = new javax.swing.JLabel();
        waveScaleqText = new javax.swing.JTextField();
        waveDimeqLabel = new javax.swing.JLabel();
        waveDimeqText = new javax.swing.JTextField();
        fluxPanel = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        fluxColumnCombo = new javax.swing.JComboBox();
        fluxPreUnitsLabel = new javax.swing.JLabel();
        fluxPreUnitsCombo = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        fluxUnitStringLabel = new javax.swing.JLabel();
        fluxUnitStringText = new javax.swing.JTextField();
        fluxCalculateButton = new javax.swing.JButton();
        fluxScaleqLabel = new javax.swing.JLabel();
        fluxScaleqText = new javax.swing.JTextField();
        fluxDimeqLabel = new javax.swing.JLabel();
        fluxDimeqText = new javax.swing.JTextField();
        errorsPanel = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        fluxUpperErrorCombo = new javax.swing.JComboBox();
        fluxPreUnitsLabel2 = new javax.swing.JLabel();
        fluxLowerErrorCombo = new javax.swing.JComboBox();
        jPanel13 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        waveUpperErrorCombo = new javax.swing.JComboBox();
        fluxPreUnitsLabel1 = new javax.swing.JLabel();
        waveLowerErrorCombo = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        acceptButton = new javax.swing.JButton();

        setTitle("Spectrum Display Data");
        setBackground(new java.awt.Color(244, 241, 239));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(244, 241, 239));
        jPanel1.setMaximumSize(new java.awt.Dimension(500, 40));
        jPanel1.setMinimumSize(new java.awt.Dimension(480, 29));
        jPanel1.setPreferredSize(new java.awt.Dimension(480, 35));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        urlLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        urlLabel.setForeground(new java.awt.Color(102, 102, 102));
        urlLabel.setText("File URL");
        urlLabel.setMaximumSize(new java.awt.Dimension(85, 15));
        urlLabel.setMinimumSize(new java.awt.Dimension(85, 15));
        urlLabel.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel1.add(urlLabel);

        urlText.setMaximumSize(new java.awt.Dimension(320, 19));
        urlText.setMinimumSize(new java.awt.Dimension(320, 19));
        urlText.setPreferredSize(new java.awt.Dimension(280, 19));
        urlText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlTextActionPerformed(evt);
            }
        });
        urlText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                urlTextKeyPressed(evt);
            }
        });
        jPanel1.add(urlText);

        urlButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        urlButton.setForeground(new java.awt.Color(102, 102, 102));
        urlButton.setText("Browse");
        urlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlButtonActionPerformed(evt);
            }
        });
        jPanel1.add(urlButton);

        jPanel2.setBackground(new java.awt.Color(244, 241, 239));
        jPanel2.setMaximumSize(new java.awt.Dimension(500, 45));
        jPanel2.setMinimumSize(new java.awt.Dimension(480, 29));
        jPanel2.setPreferredSize(new java.awt.Dimension(480, 35));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        typeLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        typeLabel.setForeground(new java.awt.Color(102, 102, 102));
        typeLabel.setText("Type");
        typeLabel.setMaximumSize(new java.awt.Dimension(85, 15));
        typeLabel.setMinimumSize(new java.awt.Dimension(85, 15));
        typeLabel.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel2.add(typeLabel);

        typeCombo.setForeground(new java.awt.Color(102, 102, 102));
        typeCombo.setMaximumSize(new java.awt.Dimension(180, 20));
        typeCombo.setMinimumSize(new java.awt.Dimension(180, 20));
        typeCombo.setPreferredSize(new java.awt.Dimension(180, 22));
        typeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeComboItemStateChanged(evt);
            }
        });
        jPanel2.add(typeCombo);

        jPanel4.setBackground(new java.awt.Color(244, 241, 239));
        jPanel4.setForeground(new java.awt.Color(102, 102, 102));
        jPanel4.setMaximumSize(new java.awt.Dimension(500, 45));
        jPanel4.setMinimumSize(new java.awt.Dimension(480, 29));
        jPanel4.setPreferredSize(new java.awt.Dimension(480, 35));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        descriptionLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        descriptionLabel.setForeground(new java.awt.Color(102, 102, 102));
        descriptionLabel.setText("Description");
        descriptionLabel.setMaximumSize(new java.awt.Dimension(85, 15));
        descriptionLabel.setMinimumSize(new java.awt.Dimension(85, 15));
        descriptionLabel.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel4.add(descriptionLabel);

        descriptionText.setMaximumSize(new java.awt.Dimension(400, 19));
        descriptionText.setMinimumSize(new java.awt.Dimension(400, 19));
        descriptionText.setPreferredSize(new java.awt.Dimension(350, 19));
        jPanel4.add(descriptionText);

        spectralPanel.setBackground(new java.awt.Color(240, 220, 211));
        spectralPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Spectral Coordinate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10))); // NOI18N
        spectralPanel.setMaximumSize(new java.awt.Dimension(500, 1300));
        spectralPanel.setMinimumSize(new java.awt.Dimension(500, 100));
        spectralPanel.setPreferredSize(new java.awt.Dimension(500, 130));

        jPanel10.setBackground(new java.awt.Color(240, 220, 211));
        jPanel10.setMaximumSize(new java.awt.Dimension(500, 45));
        jPanel10.setMinimumSize(new java.awt.Dimension(480, 29));
        jPanel10.setPreferredSize(new java.awt.Dimension(480, 45));
        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setText("Column");
        jLabel12.setMaximumSize(new java.awt.Dimension(85, 15));
        jLabel12.setMinimumSize(new java.awt.Dimension(85, 15));
        jLabel12.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel10.add(jLabel12);

        waveColumnCombo.setFont(new java.awt.Font("Dialog", 1, 10));
        waveColumnCombo.setForeground(new java.awt.Color(102, 102, 102));
        waveColumnCombo.setMaximumSize(new java.awt.Dimension(120, 20));
        waveColumnCombo.setMinimumSize(new java.awt.Dimension(120, 20));
        waveColumnCombo.setPreferredSize(new java.awt.Dimension(120, 22));
        waveColumnCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waveColumnComboActionPerformed(evt);
            }
        });
        waveColumnCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                waveColumnComboItemStateChanged(evt);
            }
        });
        jPanel10.add(waveColumnCombo);

        wavePreUnitsLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        wavePreUnitsLabel.setForeground(new java.awt.Color(102, 102, 102));
        wavePreUnitsLabel.setText("Predefined Units");
        wavePreUnitsLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        wavePreUnitsLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        wavePreUnitsLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        jPanel10.add(wavePreUnitsLabel);

        wavePreUnitsCombo.setFont(new java.awt.Font("Dialog", 0, 10));
        wavePreUnitsCombo.setForeground(new java.awt.Color(102, 102, 102));
        wavePreUnitsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "micron", "m", "Angstrom", "Hz" }));
        wavePreUnitsCombo.setMaximumSize(new java.awt.Dimension(120, 20));
        wavePreUnitsCombo.setMinimumSize(new java.awt.Dimension(120, 20));
        wavePreUnitsCombo.setPreferredSize(new java.awt.Dimension(120, 22));
        wavePreUnitsCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                wavePreUnitsComboItemStateChanged(evt);
            }
        });
        wavePreUnitsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wavePreUnitsComboActionPerformed(evt);
            }
        });
        jPanel10.add(wavePreUnitsCombo);

        jPanel6.setBackground(new java.awt.Color(240, 220, 211));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Edit if different from preselected or use ComboBox for predefined ones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel6.setForeground(new java.awt.Color(102, 102, 102));
        jPanel6.setMaximumSize(new java.awt.Dimension(500, 50));
        jPanel6.setMinimumSize(new java.awt.Dimension(480, 29));
        jPanel6.setPreferredSize(new java.awt.Dimension(480, 50));
        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 2));

        waveUnitStringLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        waveUnitStringLabel.setForeground(new java.awt.Color(102, 102, 102));
        waveUnitStringLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        waveUnitStringLabel.setText("Unit String");
        waveUnitStringLabel.setMaximumSize(new java.awt.Dimension(62, 15));
        waveUnitStringLabel.setMinimumSize(new java.awt.Dimension(62, 15));
        waveUnitStringLabel.setPreferredSize(new java.awt.Dimension(62, 15));
        jPanel6.add(waveUnitStringLabel);

        waveUnitStringText.setMaximumSize(new java.awt.Dimension(120, 19));
        waveUnitStringText.setMinimumSize(new java.awt.Dimension(120, 19));
        waveUnitStringText.setPreferredSize(new java.awt.Dimension(120, 19));
        waveUnitStringText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                waveUnitStringTextKeyPressed(evt);
            }
        });
        jPanel6.add(waveUnitStringText);

        waveCalculateButton.setFont(new java.awt.Font("Dialog", 1, 8));
        waveCalculateButton.setForeground(new java.awt.Color(102, 102, 102));
        waveCalculateButton.setText(">");
        waveCalculateButton.setToolTipText("Try to obtain Scaleq and Dimeq using ESAVO packages");
        waveCalculateButton.setMaximumSize(new java.awt.Dimension(60, 20));
        waveCalculateButton.setMinimumSize(new java.awt.Dimension(60, 20));
        waveCalculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waveCalculateButtonActionPerformed(evt);
            }
        });
        jPanel6.add(waveCalculateButton);

        waveScaleqLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        waveScaleqLabel.setForeground(new java.awt.Color(102, 102, 102));
        waveScaleqLabel.setText("Scaleq");
        waveScaleqLabel.setMaximumSize(new java.awt.Dimension(40, 15));
        waveScaleqLabel.setMinimumSize(new java.awt.Dimension(40, 15));
        waveScaleqLabel.setPreferredSize(new java.awt.Dimension(40, 15));
        jPanel6.add(waveScaleqLabel);

        waveScaleqText.setMaximumSize(new java.awt.Dimension(62, 19));
        waveScaleqText.setMinimumSize(new java.awt.Dimension(62, 19));
        waveScaleqText.setPreferredSize(new java.awt.Dimension(62, 19));
        jPanel6.add(waveScaleqText);

        waveDimeqLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        waveDimeqLabel.setForeground(new java.awt.Color(102, 102, 102));
        waveDimeqLabel.setText("Dimeq");
        waveDimeqLabel.setMaximumSize(new java.awt.Dimension(40, 15));
        waveDimeqLabel.setMinimumSize(new java.awt.Dimension(40, 15));
        waveDimeqLabel.setPreferredSize(new java.awt.Dimension(40, 15));
        jPanel6.add(waveDimeqLabel);

        waveDimeqText.setMaximumSize(new java.awt.Dimension(62, 19));
        waveDimeqText.setMinimumSize(new java.awt.Dimension(62, 19));
        waveDimeqText.setPreferredSize(new java.awt.Dimension(62, 19));
        jPanel6.add(waveDimeqText);

        org.jdesktop.layout.GroupLayout spectralPanelLayout = new org.jdesktop.layout.GroupLayout(spectralPanel);
        spectralPanel.setLayout(spectralPanelLayout);
        spectralPanelLayout.setHorizontalGroup(
            spectralPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(spectralPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
        );
        spectralPanelLayout.setVerticalGroup(
            spectralPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(spectralPanelLayout.createSequentialGroup()
                .add(jPanel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        fluxPanel.setBackground(new java.awt.Color(214, 215, 235));
        fluxPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Flux Coordinate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10))); // NOI18N
        fluxPanel.setMaximumSize(new java.awt.Dimension(500, 120));
        fluxPanel.setMinimumSize(new java.awt.Dimension(500, 100));
        fluxPanel.setPreferredSize(new java.awt.Dimension(500, 130));

        jPanel12.setBackground(new java.awt.Color(214, 215, 235));
        jPanel12.setMaximumSize(new java.awt.Dimension(500, 35));
        jPanel12.setMinimumSize(new java.awt.Dimension(480, 29));
        jPanel12.setPreferredSize(new java.awt.Dimension(480, 40));
        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("Column");
        jLabel13.setMaximumSize(new java.awt.Dimension(85, 15));
        jLabel13.setMinimumSize(new java.awt.Dimension(85, 15));
        jLabel13.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel12.add(jLabel13);

        fluxColumnCombo.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxColumnCombo.setForeground(new java.awt.Color(102, 102, 102));
        fluxColumnCombo.setMaximumSize(new java.awt.Dimension(120, 20));
        fluxColumnCombo.setMinimumSize(new java.awt.Dimension(120, 20));
        fluxColumnCombo.setPreferredSize(new java.awt.Dimension(120, 22));
        fluxColumnCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fluxColumnComboItemStateChanged(evt);
            }
        });
        jPanel12.add(fluxColumnCombo);

        fluxPreUnitsLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxPreUnitsLabel.setForeground(new java.awt.Color(102, 102, 102));
        fluxPreUnitsLabel.setText("Predefined Units");
        fluxPreUnitsLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        fluxPreUnitsLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        fluxPreUnitsLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        jPanel12.add(fluxPreUnitsLabel);

        fluxPreUnitsCombo.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxPreUnitsCombo.setForeground(new java.awt.Color(102, 102, 102));
        fluxPreUnitsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Jy", "W/cm^2/um", "erg/cm^2/s/Angstrom", "W/m^2", "uncalibrated" }));
        fluxPreUnitsCombo.setMaximumSize(new java.awt.Dimension(120, 20));
        fluxPreUnitsCombo.setMinimumSize(new java.awt.Dimension(120, 20));
        fluxPreUnitsCombo.setPreferredSize(new java.awt.Dimension(120, 22));
        fluxPreUnitsCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fluxPreUnitsComboItemStateChanged(evt);
            }
        });
        fluxPreUnitsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxPreUnitsComboActionPerformed(evt);
            }
        });
        jPanel12.add(fluxPreUnitsCombo);

        jPanel7.setBackground(new java.awt.Color(214, 215, 235));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Edit if different from preselected or use ComboBox for predefined ones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel7.setForeground(new java.awt.Color(102, 102, 102));
        jPanel7.setMaximumSize(new java.awt.Dimension(500, 50));
        jPanel7.setMinimumSize(new java.awt.Dimension(480, 29));
        jPanel7.setPreferredSize(new java.awt.Dimension(480, 50));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        fluxUnitStringLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxUnitStringLabel.setForeground(new java.awt.Color(102, 102, 102));
        fluxUnitStringLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fluxUnitStringLabel.setText("Unit String");
        fluxUnitStringLabel.setMaximumSize(new java.awt.Dimension(62, 15));
        fluxUnitStringLabel.setMinimumSize(new java.awt.Dimension(62, 15));
        fluxUnitStringLabel.setPreferredSize(new java.awt.Dimension(62, 15));
        jPanel7.add(fluxUnitStringLabel);

        fluxUnitStringText.setMaximumSize(new java.awt.Dimension(120, 19));
        fluxUnitStringText.setMinimumSize(new java.awt.Dimension(120, 19));
        fluxUnitStringText.setPreferredSize(new java.awt.Dimension(105, 19));
        fluxUnitStringText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fluxUnitStringTextKeyPressed(evt);
            }
        });
        jPanel7.add(fluxUnitStringText);

        fluxCalculateButton.setFont(new java.awt.Font("Dialog", 1, 8));
        fluxCalculateButton.setForeground(new java.awt.Color(102, 102, 102));
        fluxCalculateButton.setText(">");
        fluxCalculateButton.setToolTipText("Try to obtain Scaleq and Dimeq using ESAVO packages");
        fluxCalculateButton.setMaximumSize(new java.awt.Dimension(60, 20));
        fluxCalculateButton.setMinimumSize(new java.awt.Dimension(60, 20));
        fluxCalculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxCalculateButtonActionPerformed(evt);
            }
        });
        jPanel7.add(fluxCalculateButton);

        fluxScaleqLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxScaleqLabel.setForeground(new java.awt.Color(102, 102, 102));
        fluxScaleqLabel.setText("Scaleq");
        fluxScaleqLabel.setMaximumSize(new java.awt.Dimension(40, 15));
        fluxScaleqLabel.setMinimumSize(new java.awt.Dimension(40, 15));
        fluxScaleqLabel.setPreferredSize(new java.awt.Dimension(40, 15));
        jPanel7.add(fluxScaleqLabel);

        fluxScaleqText.setMaximumSize(new java.awt.Dimension(62, 19));
        fluxScaleqText.setMinimumSize(new java.awt.Dimension(62, 19));
        fluxScaleqText.setPreferredSize(new java.awt.Dimension(60, 19));
        jPanel7.add(fluxScaleqText);

        fluxDimeqLabel.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxDimeqLabel.setForeground(new java.awt.Color(102, 102, 102));
        fluxDimeqLabel.setText("Dimeq");
        fluxDimeqLabel.setMaximumSize(new java.awt.Dimension(40, 15));
        fluxDimeqLabel.setMinimumSize(new java.awt.Dimension(40, 15));
        fluxDimeqLabel.setPreferredSize(new java.awt.Dimension(40, 15));
        jPanel7.add(fluxDimeqLabel);

        fluxDimeqText.setMaximumSize(new java.awt.Dimension(62, 19));
        fluxDimeqText.setMinimumSize(new java.awt.Dimension(62, 19));
        fluxDimeqText.setPreferredSize(new java.awt.Dimension(60, 19));
        jPanel7.add(fluxDimeqText);

        org.jdesktop.layout.GroupLayout fluxPanelLayout = new org.jdesktop.layout.GroupLayout(fluxPanel);
        fluxPanel.setLayout(fluxPanelLayout);
        fluxPanelLayout.setHorizontalGroup(
            fluxPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
            .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
        );
        fluxPanelLayout.setVerticalGroup(
            fluxPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fluxPanelLayout.createSequentialGroup()
                .add(jPanel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
        );

        errorsPanel.setBackground(new java.awt.Color(244, 241, 239));
        errorsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Errors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10))); // NOI18N
        errorsPanel.setMaximumSize(new java.awt.Dimension(500, 120));
        errorsPanel.setMinimumSize(new java.awt.Dimension(500, 100));
        errorsPanel.setPreferredSize(new java.awt.Dimension(500, 120));

        jPanel14.setBackground(new java.awt.Color(214, 215, 235));
        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Flux"));
        jPanel14.setToolTipText("Flux");
        jPanel14.setMaximumSize(new java.awt.Dimension(500, 35));
        jPanel14.setMinimumSize(new java.awt.Dimension(480, 29));
        jPanel14.setPreferredSize(new java.awt.Dimension(240, 40));

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("Upper error");
        jLabel15.setMaximumSize(new java.awt.Dimension(85, 15));
        jLabel15.setMinimumSize(new java.awt.Dimension(85, 15));
        jLabel15.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel14.add(jLabel15);

        fluxUpperErrorCombo.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxUpperErrorCombo.setForeground(new java.awt.Color(102, 102, 102));
        fluxUpperErrorCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        fluxUpperErrorCombo.setMaximumSize(new java.awt.Dimension(120, 20));
        fluxUpperErrorCombo.setMinimumSize(new java.awt.Dimension(120, 20));
        fluxUpperErrorCombo.setPreferredSize(new java.awt.Dimension(120, 22));
        fluxUpperErrorCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fluxUpperErrorComboItemStateChanged(evt);
            }
        });
        jPanel14.add(fluxUpperErrorCombo);

        fluxPreUnitsLabel2.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxPreUnitsLabel2.setForeground(new java.awt.Color(102, 102, 102));
        fluxPreUnitsLabel2.setText("Lower error");
        fluxPreUnitsLabel2.setMaximumSize(new java.awt.Dimension(85, 15));
        fluxPreUnitsLabel2.setMinimumSize(new java.awt.Dimension(85, 15));
        fluxPreUnitsLabel2.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel14.add(fluxPreUnitsLabel2);

        fluxLowerErrorCombo.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxLowerErrorCombo.setForeground(new java.awt.Color(102, 102, 102));
        fluxLowerErrorCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        fluxLowerErrorCombo.setMaximumSize(new java.awt.Dimension(120, 20));
        fluxLowerErrorCombo.setMinimumSize(new java.awt.Dimension(120, 20));
        fluxLowerErrorCombo.setPreferredSize(new java.awt.Dimension(120, 22));
        fluxLowerErrorCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fluxLowerErrorComboItemStateChanged(evt);
            }
        });
        fluxLowerErrorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxLowerErrorComboActionPerformed(evt);
            }
        });
        jPanel14.add(fluxLowerErrorCombo);

        jPanel13.setBackground(new java.awt.Color(240, 220, 211));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Spectral"));
        jPanel13.setToolTipText("Spectral");
        jPanel13.setMaximumSize(new java.awt.Dimension(500, 35));
        jPanel13.setMinimumSize(new java.awt.Dimension(480, 29));
        jPanel13.setPreferredSize(new java.awt.Dimension(240, 40));

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("Upper error");
        jLabel14.setMaximumSize(new java.awt.Dimension(85, 15));
        jLabel14.setMinimumSize(new java.awt.Dimension(85, 15));
        jLabel14.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel13.add(jLabel14);

        waveUpperErrorCombo.setFont(new java.awt.Font("Dialog", 1, 10));
        waveUpperErrorCombo.setForeground(new java.awt.Color(102, 102, 102));
        waveUpperErrorCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        waveUpperErrorCombo.setMaximumSize(new java.awt.Dimension(120, 20));
        waveUpperErrorCombo.setMinimumSize(new java.awt.Dimension(120, 20));
        waveUpperErrorCombo.setPreferredSize(new java.awt.Dimension(120, 22));
        waveUpperErrorCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                waveUpperErrorComboItemStateChanged(evt);
            }
        });
        jPanel13.add(waveUpperErrorCombo);

        fluxPreUnitsLabel1.setFont(new java.awt.Font("Dialog", 1, 10));
        fluxPreUnitsLabel1.setForeground(new java.awt.Color(102, 102, 102));
        fluxPreUnitsLabel1.setText("Lower error");
        fluxPreUnitsLabel1.setMaximumSize(new java.awt.Dimension(85, 15));
        fluxPreUnitsLabel1.setMinimumSize(new java.awt.Dimension(85, 15));
        fluxPreUnitsLabel1.setPreferredSize(new java.awt.Dimension(85, 15));
        jPanel13.add(fluxPreUnitsLabel1);

        waveLowerErrorCombo.setFont(new java.awt.Font("Dialog", 1, 10));
        waveLowerErrorCombo.setForeground(new java.awt.Color(102, 102, 102));
        waveLowerErrorCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        waveLowerErrorCombo.setMaximumSize(new java.awt.Dimension(120, 20));
        waveLowerErrorCombo.setMinimumSize(new java.awt.Dimension(120, 20));
        waveLowerErrorCombo.setPreferredSize(new java.awt.Dimension(120, 22));
        waveLowerErrorCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                waveLowerErrorComboItemStateChanged(evt);
            }
        });
        waveLowerErrorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waveLowerErrorComboActionPerformed(evt);
            }
        });
        jPanel13.add(waveLowerErrorCombo);

        org.jdesktop.layout.GroupLayout errorsPanelLayout = new org.jdesktop.layout.GroupLayout(errorsPanel);
        errorsPanel.setLayout(errorsPanelLayout);
        errorsPanelLayout.setHorizontalGroup(
            errorsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(errorsPanelLayout.createSequentialGroup()
                .add(jPanel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 258, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 292, Short.MAX_VALUE))
        );
        errorsPanelLayout.setVerticalGroup(
            errorsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel14, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
            .add(jPanel13, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(244, 241, 239));
        jPanel3.setForeground(new java.awt.Color(102, 102, 102));

        refreshButton.setFont(new java.awt.Font("Dialog", 1, 11));
        refreshButton.setForeground(new java.awt.Color(102, 102, 102));
        refreshButton.setText("Refresh");
        refreshButton.setMaximumSize(new java.awt.Dimension(80, 24));
        refreshButton.setMinimumSize(new java.awt.Dimension(80, 24));
        refreshButton.setPreferredSize(new java.awt.Dimension(90, 24));
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 1, 11));
        cancelButton.setForeground(new java.awt.Color(102, 102, 102));
        cancelButton.setText("Cancel");
        cancelButton.setMaximumSize(new java.awt.Dimension(80, 24));
        cancelButton.setMinimumSize(new java.awt.Dimension(80, 24));
        cancelButton.setPreferredSize(new java.awt.Dimension(80, 24));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        acceptButton.setFont(new java.awt.Font("Dialog", 1, 11));
        acceptButton.setForeground(new java.awt.Color(102, 102, 102));
        acceptButton.setText("Accept");
        acceptButton.setMaximumSize(new java.awt.Dimension(80, 24));
        acceptButton.setMinimumSize(new java.awt.Dimension(80, 24));
        acceptButton.setPreferredSize(new java.awt.Dimension(80, 24));
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(97, 97, 97)
                .add(refreshButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(26, 26, 26)
                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(35, 35, 35)
                .add(acceptButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(160, 160, 160))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(acceptButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(refreshButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .add(spectralPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .add(fluxPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .add(errorsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(spectralPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(fluxPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(errorsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-564)/2, (screenSize.height-588)/2, 564, 588);
    }// </editor-fold>//GEN-END:initComponents

    private void fluxUnitStringTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fluxUnitStringTextKeyPressed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) tryFluxUnits(fluxUnitStringText.getText(),true);
    }//GEN-LAST:event_fluxUnitStringTextKeyPressed

    private void waveUnitStringTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_waveUnitStringTextKeyPressed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) tryWaveUnits(waveUnitStringText.getText(),true);
    }//GEN-LAST:event_waveUnitStringTextKeyPressed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        setFileName(urlText.getText(),false);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void typeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeComboItemStateChanged
       if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) checkType((String) typeCombo.getSelectedItem());
    }//GEN-LAST:event_typeComboItemStateChanged

    private void urlTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_urlTextKeyPressed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) setFileName(urlText.getText(),false);
    }//GEN-LAST:event_urlTextKeyPressed

    private void urlTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlTextActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_urlTextActionPerformed

    private void fluxCalculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxCalculateButtonActionPerformed
       tryFluxUnits(fluxUnitStringText.getText(),true);
    }//GEN-LAST:event_fluxCalculateButtonActionPerformed

    private void waveCalculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waveCalculateButtonActionPerformed
       tryWaveUnits(waveUnitStringText.getText(),true);
    }//GEN-LAST:event_waveCalculateButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        outputSpectrum = null;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed

        if( waveScaleqText.getText().replaceAll(" ", "").equals("") ||
            waveDimeqText.getText().replaceAll(" ", "").equals("") ||
            (fluxScaleqText.getText().replaceAll(" ", "").equals("") && !((String) fluxPreUnitsCombo.getSelectedItem()).equals("uncalibrated")) ||
            (fluxDimeqText.getText().replaceAll(" ", "").equals("") && !((String) fluxPreUnitsCombo.getSelectedItem()).equals("uncalibrated")) ) {

            if(! ((String) typeCombo.getSelectedItem()).equals(Utils.PHOTOMETRY_TYPE)) {
                javax.swing.JOptionPane.showMessageDialog(this,"The Scaleq and Dimeq text fields for the wave and flux columns needs to have values.\n" +
                                                           "Enter a valid units string and press the button to calculate them automatically (the\n" +
                                                           "predefined units combo box have some examples of valid unit strings)\n" +
                                                            "or enter values by hand");
                return;
            }
        }

        Spectrum cloneSpectrum = new Spectrum();

        cloneSpectrum.setTitle(descriptionText.getText());
        cloneSpectrum.setUrl(urlText.getText());

        cloneSpectrum.setFormat((String) typeCombo.getSelectedItem());

        cloneSpectrum.setWaveLengthColumnName((String) waveColumnCombo.getSelectedItem());
        cloneSpectrum.setUnitsW(waveUnitStringText.getText());
        cloneSpectrum.setWaveFactor(waveScaleqText.getText());
        cloneSpectrum.setDimeQWave(waveDimeqText.getText());

        if(((String) fluxPreUnitsCombo.getSelectedItem()).equals("uncalibrated")){
            cloneSpectrum.setToBeNormalized(true);
        }else{
            cloneSpectrum.setFluxColumnName((String) fluxColumnCombo.getSelectedItem());
            cloneSpectrum.setUnitsF(fluxUnitStringText.getText());
            cloneSpectrum.setFluxFactor(fluxScaleqText.getText());
            cloneSpectrum.setDimeQ(fluxDimeqText.getText());
        }

        cloneSpectrum = Utils.setMetadata(cloneSpectrum);


        //Errors

        cloneSpectrum.setFluxErrorUpperColumnName((String)fluxUpperErrorCombo.getSelectedItem());
        cloneSpectrum.setFluxErrorLowerColumnName((String)fluxLowerErrorCombo.getSelectedItem());
        cloneSpectrum.setWaveErrorUpperColumnName((String)waveUpperErrorCombo.getSelectedItem());
        cloneSpectrum.setWaveErrorLowerColumnName((String)waveLowerErrorCombo.getSelectedItem());

        if((!((String)fluxUpperErrorCombo.getSelectedItem()).equals("None"))
                ||(!(((String)fluxLowerErrorCombo.getSelectedItem()).equals("None")))){
            cloneSpectrum.setFluxErrorsPresent(true);
        }else{
            cloneSpectrum.setFluxErrorsPresent(false);
        }
        if((!((String)waveUpperErrorCombo.getSelectedItem()).equals("None"))
                ||(!(((String)waveLowerErrorCombo.getSelectedItem()).equals("None")))){
            cloneSpectrum.setWaveErrorsPresent(true);
        }else{
            cloneSpectrum.setWaveErrorsPresent(false);
        }



        if(((String) typeCombo.getSelectedItem()).equals(Utils.SED_TYPE)){
            outputSpectrum = new SedSpectrum(cloneSpectrum);
        } else if(((String) typeCombo.getSelectedItem()).equals(Utils.FITS_TYPE)) {
            outputSpectrum = new FitsSpectrum(cloneSpectrum);
        } else if(((String) typeCombo.getSelectedItem()).equals(Utils.FITS1D_TYPE)) {
            outputSpectrum = new Fits1DSpectrum(cloneSpectrum);
        } else if(((String) typeCombo.getSelectedItem()).equals(Utils.VOTABLE_TYPE)) {
            outputSpectrum = new VoTableSpectrum(cloneSpectrum);
        } else if(((String) typeCombo.getSelectedItem()).equals(Utils.PHOTOMETRY_TYPE)) {
            outputSpectrum = new PhotometrySpectrum(cloneSpectrum);
        } else outputSpectrum = cloneSpectrum;

        //outputSpectrum.calculateData();
        outputSpectrum.setSelected(true);
        setVisible(false);
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void urlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlButtonActionPerformed
        fileSelectorAction(null,null);
    }//GEN-LAST:event_urlButtonActionPerformed

    public void fileSelectorAction(String urlString, String labelString) {

       if(urlString == null) {
            JFileChooser fileChooser;
            if(currentDirectory != null) {
                fileChooser = new JFileChooser(currentDirectory);
            } else {
                fileChooser = new JFileChooser();
            }

            int returnVal   = fileChooser.showOpenDialog(this);
            File localFile  = fileChooser.getSelectedFile();

            if(returnVal != JFileChooser.APPROVE_OPTION) return;

            if(localFile == null) return;
            currentDirectory = localFile.getParentFile();
            urlString = "file:" + localFile.getAbsolutePath();
       }

       setFileName(urlString,true);
       System.out.println("setFileName "+urlString);
       if(labelString != null) descriptionText.setText(labelString);
       this.show();

    }

    public void beanSpectrum(Spectrum spectrum) {

        setFileName(spectrum.getUrl(),false);

        descriptionText.setText(spectrum.getTitle());
        urlText.setText(spectrum.getUrl());

        typeCombo.setSelectedItem(spectrum.getFormat());

        waveColumnCombo.setSelectedItem(spectrum.getWaveLengthColumnName());
        waveUnitStringText.setText(spectrum.getUnitsW());
        waveScaleqText.setText(spectrum.getWaveFactor());
        waveDimeqText.setText(spectrum.getDimeQWave());

        fluxColumnCombo.setSelectedItem(spectrum.getFluxColumnName());
        fluxUnitStringText.setText(spectrum.getUnitsF());
        fluxScaleqText.setText(spectrum.getFluxFactor());
        fluxDimeqText.setText(spectrum.getDimeQ());

        fluxUpperErrorCombo.setSelectedItem(spectrum.getFluxErrorUpperColumnName());
        fluxLowerErrorCombo.setSelectedItem(spectrum.getFluxErrorLowerColumnName());

        waveUpperErrorCombo.setSelectedItem(spectrum.getWaveErrorUpperColumnName());
        waveLowerErrorCombo.setSelectedItem(spectrum.getWaveErrorLowerColumnName());

        this.show();

    }

    private void wavePreUnitsComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_wavePreUnitsComboItemStateChanged
        // Add your handling code here:
    }//GEN-LAST:event_wavePreUnitsComboItemStateChanged

    private void fluxPreUnitsComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fluxPreUnitsComboItemStateChanged
        // Add your handling code here:
    }//GEN-LAST:event_fluxPreUnitsComboItemStateChanged

    private void fluxPreUnitsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxPreUnitsComboActionPerformed
        setFluxCandidate((String) fluxPreUnitsCombo.getSelectedItem());
    }//GEN-LAST:event_fluxPreUnitsComboActionPerformed


    private void wavePreUnitsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wavePreUnitsComboActionPerformed
        setWaveCandidate((String) wavePreUnitsCombo.getSelectedItem());
    }//GEN-LAST:event_wavePreUnitsComboActionPerformed

    private void fluxColumnComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fluxColumnComboItemStateChanged

        fluxDimeqText.setText("");
        fluxScaleqText.setText("");

        String[] column = new String[2];
        for(int i=0; i < columnsVector.size(); i++) {
               column = (String[]) columnsVector.elementAt(i);
               if(column[0].equals((String) fluxColumnCombo.getSelectedItem())) {
                    setFluxCandidate(column[1]);
                    break;
               }
        }

    }//GEN-LAST:event_fluxColumnComboItemStateChanged

    private void waveColumnComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_waveColumnComboItemStateChanged

        waveDimeqText.setText("");
        waveScaleqText.setText("");

        String[] column = new String[2];
        for(int i=0; i < columnsVector.size(); i++) {
               column = (String[]) columnsVector.elementAt(i);
               if(column[0].equals((String) waveColumnCombo.getSelectedItem())) {
                    setWaveCandidate(column[1]);
                    break;
               }
        }

    }//GEN-LAST:event_waveColumnComboItemStateChanged

    private void waveColumnComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waveColumnComboActionPerformed

    }//GEN-LAST:event_waveColumnComboActionPerformed

    private void myInitComponents() {
        typeCombo.addItem(Utils.SED_TYPE);
        typeCombo.addItem(Utils.FITS_TYPE);
        typeCombo.addItem(Utils.FITS1D_TYPE);
        typeCombo.addItem(Utils.VOTABLE_TYPE);
        typeCombo.addItem(Utils.PHOTOMETRY_TYPE);
    }
    public void checkType(String type) {
        if(type.equals(Utils.PHOTOMETRY_TYPE)) {
            disableAxis();
            enableErrors(false);
            waveUnitStringText.setText("um");
            waveScaleqText.setText("1E-6");
            waveDimeqText.setText("L");

            fluxUnitStringText.setText("Jy");
            fluxScaleqText.setText("1E-26");
            fluxDimeqText.setText("MT-2");

        } else if (type.equals(Utils.SED_TYPE)) {

            enableAxisAndSetColumns();
            enableErrors(false);
            enableColumns(false);

        } else {

            enableAxisAndSetColumns();
            enableErrors(true);
            enableColumns(true);

        }
    }


    private void enableErrors(boolean enable){

        waveUpperErrorCombo.setEnabled(enable);
        waveLowerErrorCombo.setEnabled(enable);
        fluxUpperErrorCombo.setEnabled(enable);
        fluxLowerErrorCombo.setEnabled(enable);

    }

    private void enableColumns(boolean enable){

        waveColumnCombo.setEnabled(enable);
        fluxColumnCombo.setEnabled(enable);

    }

    public void disableAxis() {
            disableEnableComponent(spectralPanel,false);
            disableEnableComponent(fluxPanel,false);
    }
    public void enableAxisAndSetColumns() {
            disableEnableComponent(spectralPanel,true);
            disableEnableComponent(fluxPanel,true);
            setColumns();
    }

    public void disableEnableComponent(Component component, boolean toEnable) {

        component.setEnabled(toEnable);
        Component[] componentArray = ((Container) component).getComponents();
        for(int i=0; i < componentArray.length; i++) {
            Component componentTmp = componentArray[i];
            disableEnableComponent(componentTmp,toEnable);
        }
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void waveUpperErrorComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_waveUpperErrorComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_waveUpperErrorComboItemStateChanged

    private void waveLowerErrorComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_waveLowerErrorComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_waveLowerErrorComboItemStateChanged

    private void waveLowerErrorComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waveLowerErrorComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_waveLowerErrorComboActionPerformed

    private void fluxUpperErrorComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fluxUpperErrorComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_fluxUpperErrorComboItemStateChanged

    private void fluxLowerErrorComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fluxLowerErrorComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_fluxLowerErrorComboItemStateChanged

    private void fluxLowerErrorComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxLowerErrorComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fluxLowerErrorComboActionPerformed

    public void setFileName(String filenameString, boolean resetDescription) {
        if(resetDescription) descriptionText.setText(filenameString);
        urlText.setText(filenameString);
        setFileType(filenameString);
    }

    public void setFileType(String filenameString) {


            // Nothing decided. We try to open the file
            try {

                setColumnsOnlyTry(Utils.SED_TYPE);
                typeCombo.setSelectedItem(Utils.SED_TYPE);
                
            } catch (Throwable eNoSed) {
                try {
                    setColumnsOnlyTry(Utils.FITS_TYPE);
                    typeCombo.setSelectedItem(Utils.FITS_TYPE);

                } catch (Throwable eNoFits) {
                    try {
                        setColumnsOnlyTry(Utils.FITS1D_TYPE);
                        typeCombo.setSelectedItem(Utils.FITS1D_TYPE);

                    } catch (Throwable eNoFits1D) {
                        try {
                            setColumnsOnlyTry(Utils.VOTABLE_TYPE);
                            typeCombo.setSelectedItem(Utils.VOTABLE_TYPE);

                        } catch (Throwable eNoVotable) {
                            try{
                                typeCombo.setSelectedItem(Utils.PHOTOMETRY_TYPE);
                                
                                } catch (Throwable eNoPhotometry) {
                                    //nothing
                                }

                        }
                    }
                }

            }

        }

    public void setColumns() {

        try {
            setColumnsOnlyTry((String) typeCombo.getSelectedItem());
        } catch(Exception e) {
           javax.swing.JOptionPane.showMessageDialog(this,"Problems reading/parsing the file. Reason: " + e.toString());
           e.printStackTrace();
        }
    }

    public void setColumnsOnlyTry(String fileType) throws Exception {

        waveColumnCombo.removeAllItems();
        fluxColumnCombo.removeAllItems();
        fluxUpperErrorCombo.removeAllItems();
        fluxLowerErrorCombo.removeAllItems();
        waveUpperErrorCombo.removeAllItems();
        waveLowerErrorCombo.removeAllItems();
        fluxUpperErrorCombo.addItem("None");
        fluxLowerErrorCombo.addItem("None");
        waveUpperErrorCombo.addItem("None");
        waveLowerErrorCombo.addItem("None");

        boolean waveCandidateSelected = false;
        boolean fluxCandidateSelected = false;
        waveScaleqText.setText("");
        waveDimeqText.setText("");
        fluxScaleqText.setText("");
        fluxDimeqText.setText("");

        if(urlText.getText().equals("")) return;

        try{
            columnsVector = Utils.getColumns(urlText.getText(),fileType);
        }catch (Throwable t){
            // nothing
        }

        if(columnsVector.size()==0)throw new Exception("No columns found for this type");

        for(int i=0; i < columnsVector.size(); i++) {

            String[] column = (String[]) columnsVector.elementAt(i);

            waveColumnCombo.addItem(column[0]);
            if(waveCandidate(column[0]) && !waveCandidateSelected) {

                waveColumnCombo.setSelectedItem(column[0]);
                setWaveCandidate(column[1]);

                waveCandidateSelected = true;
             }

            fluxColumnCombo.addItem(column[0]);
            if(fluxCandidate(column[0]) && !fluxCandidateSelected) {

                fluxColumnCombo.setSelectedItem(column[0]);
                setFluxCandidate(column[1]);

                fluxCandidateSelected = true;
            }

            //As errors
            fluxUpperErrorCombo.addItem(column[0]);
            fluxLowerErrorCombo.addItem(column[0]);
            //As errors
            waveUpperErrorCombo.addItem(column[0]);
            waveLowerErrorCombo.addItem(column[0]);



        }
    }

    public boolean waveCandidate(String columnName) {
        boolean result = false;

        if(columnName.toUpperCase().indexOf("WAV")      != -1) result = true;
        if(columnName.toUpperCase().indexOf("SPECTRAL") != -1) result = true;

        return result;
    }

    public void setWaveCandidate(String columnUnit) {
        waveUnitStringText.setText(columnUnit);
        tryWaveUnits(columnUnit,false);
    }

    public void tryWaveUnits(String columnUnit, boolean showException) {

        if(columnUnit.equals(""))return;

        try{

            String[] dimensional = Utils.getDimensionalEquation(columnUnit);
            waveScaleqText.setText(dimensional[0]);
            waveDimeqText.setText(dimensional[1]);

        } catch(Exception e) {

            if(showException) javax.swing.JOptionPane.showMessageDialog(this,"Problems parsing the units: " + e.toString());
        }
    }

    public boolean fluxCandidate(String columnName) {
        boolean result = false;

        if(columnName.toUpperCase().indexOf("FLUX")     != -1) result = true;
        if(columnName.toUpperCase().indexOf("FLX")      != -1) result = true;

        return result;
    }

    public void setFluxCandidate(String columnUnit) {
        fluxUnitStringText.setText(columnUnit);
        tryFluxUnits(columnUnit,false);
    }

    public void tryFluxUnits(String columnUnit,boolean showException) {

        if(columnUnit.equals(""))return;

        try{

            String[] dimensional = Utils.getDimensionalEquation(columnUnit);
            fluxScaleqText.setText(dimensional[0]);
            fluxDimeqText.setText(dimensional[1]);

        } catch(Exception e) {

            if(showException) javax.swing.JOptionPane.showMessageDialog(this,"Problems to parsing the units: " + e.toString());

        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        AddNewDialog addNewDialog = new AddNewDialog(new javax.swing.JFrame(), true);
        addNewDialog.fileSelectorAction(null,null);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionText;
    private javax.swing.JPanel errorsPanel;
    private javax.swing.JButton fluxCalculateButton;
    private javax.swing.JComboBox fluxColumnCombo;
    private javax.swing.JLabel fluxDimeqLabel;
    private javax.swing.JTextField fluxDimeqText;
    private javax.swing.JComboBox fluxLowerErrorCombo;
    private javax.swing.JPanel fluxPanel;
    private javax.swing.JComboBox fluxPreUnitsCombo;
    private javax.swing.JLabel fluxPreUnitsLabel;
    private javax.swing.JLabel fluxPreUnitsLabel1;
    private javax.swing.JLabel fluxPreUnitsLabel2;
    private javax.swing.JLabel fluxScaleqLabel;
    private javax.swing.JTextField fluxScaleqText;
    private javax.swing.JLabel fluxUnitStringLabel;
    private javax.swing.JTextField fluxUnitStringText;
    private javax.swing.JComboBox fluxUpperErrorCombo;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton refreshButton;
    private javax.swing.JPanel spectralPanel;
    private javax.swing.JComboBox typeCombo;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton urlButton;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlText;
    private javax.swing.JButton waveCalculateButton;
    private javax.swing.JComboBox waveColumnCombo;
    private javax.swing.JLabel waveDimeqLabel;
    private javax.swing.JTextField waveDimeqText;
    private javax.swing.JComboBox waveLowerErrorCombo;
    private javax.swing.JComboBox wavePreUnitsCombo;
    private javax.swing.JLabel wavePreUnitsLabel;
    private javax.swing.JLabel waveScaleqLabel;
    private javax.swing.JTextField waveScaleqText;
    private javax.swing.JLabel waveUnitStringLabel;
    private javax.swing.JTextField waveUnitStringText;
    private javax.swing.JComboBox waveUpperErrorCombo;
    // End of variables declaration//GEN-END:variables

}
