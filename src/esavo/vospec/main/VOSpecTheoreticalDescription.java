/* 
 * Copyright (C) 2017 ESDC/ESA 2017
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package esavo.vospec.main;


import java.awt.Dimension;
import java.awt.Toolkit;
import java.lang.*;

/**
 *
 * @author  ibarbarisi
 */
public class VOSpecTheoreticalDescription extends javax.swing.JDialog {
    
    
    public String descWrap;
    /** Creates new form AioSpecTheoreticalDescription */
    public VOSpecTheoreticalDescription(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public VOSpecTheoreticalDescription(String desc) {
        
        String descWrap = lineWrapper(desc);
        this.descWrap = descWrap;
        this.setSize(250,150);
        this.setTitle("Description");
        initComponents();
         
        bodyTextArea.append(descWrap);

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(screenSize.width / 2 - this.getWidth() / 2, (screenSize.height / 2) - this.getHeight() / 2);

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bodyScrollPanel = new javax.swing.JScrollPane();
        bodyTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        bodyScrollPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        bodyTextArea.setLineWrap(true);
        bodyTextArea.setMaximumSize(new java.awt.Dimension(180, 80));
        bodyTextArea.setPreferredSize(new java.awt.Dimension(380, 80));
        bodyScrollPanel.setViewportView(bodyTextArea);

        getContentPane().add(bodyScrollPanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new VOSpecTheoreticalDescription(new javax.swing.JFrame(), true).show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane bodyScrollPanel;
    private javax.swing.JTextArea bodyTextArea;
    // End of variables declaration//GEN-END:variables
    
    public static String lineWrapper(String longLine) {
     	
	int maxChar		= 0;
	int count 		= 0;
	
	String lineWrapped 	= "";
	
	if(longLine == null) return lineWrapped;
	if(longLine.equals("")) return lineWrapped;
	
	longLine = subsCharacter(longLine,'>',"&gt;");
	longLine = subsCharacter(longLine,'<',"&lt;");
	
    	while(count<longLine.length()-1) {
		maxChar = count + 60;
		
		int endLine = longLine.indexOf("\n",count);
		if (endLine == -1 || (endLine-count) >= 60) {
			if (maxChar<longLine.length()) {
				while(isSeparator(longLine.charAt(maxChar)) == 0) {
					maxChar = maxChar-1;
			
					if(maxChar == 0) {
						maxChar = 60;
						break;
					}		
				}
			}
		} else {
			maxChar = endLine;
		}		
		
		if (maxChar >= longLine.length()) maxChar = longLine.length()-1;
		
		if(isSeparator(longLine.charAt(maxChar)) == 2) {
			lineWrapped = lineWrapped + longLine.substring(count,maxChar) + "\n";
		} else {	
			lineWrapped = lineWrapped + longLine.substring(count,maxChar+1) + "\n";
		}	
		count = maxChar+1;			
     	}    
    	
    	return lineWrapped;
     }
    
     public static String subsCharacter(String line,char charToChange,String stringSubs) {
    	String newLine = "";
	
	for(int charInt = 0; charInt <line.length(); charInt ++) {
		char thisChar = line.charAt(charInt);
		String thisCharString = (new Character(thisChar)).toString();

		if(thisChar == charToChange) {
			newLine = newLine + stringSubs;
		} else {	
			newLine = newLine + thisCharString;
		}
    	}
	
    	return newLine;
    }
    
    public static int isSeparator(char c) {
     	if(c == ',' || c == '.' || c == '-' || c == '?' || c == ';' || c == ':' || c == ')') {
		return 1;
	} else if (c == ' ' || c == '\n' || c == '\t' ) {
		return 2;		
		
	} else {
		return 0;			
	}    
     }   
     
    
}
